{"version":3,"sources":["IxnButton.js","App.js","serviceWorker.js","index.js"],"names":["IxnButton","_Button","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","tag","get","prototype","call","React","cloneElement","assign","props","className","onClick","e","alert","Button","IxnButton2","newProps","react_default","a","createElement","IxnButton3","objectSpread","style","backgroundColor","App","_this","color","IxnButton_IxnButton","console","log","IxnButton_IxnButton2","IxnButton_IxnButton3","border-color","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAIaA,SAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEQ,IAAMC,EAAGX,OAAAY,EAAA,EAAAZ,QAAAI,EAAA,EAAAJ,CAAAF,EAAAe,WAAA,SAAAX,MAAAY,KAAAZ,MACT,OAAOa,IAAMC,aAAaL,EAAKX,OAAOiB,OAAO,GACzCN,EAAIO,MACJ,CACIC,UAAW,SAAWR,EAAIO,MAAMC,UAChCC,QAAS,SAAAC,GACLC,QACAX,EAAIO,MAAME,QAAQC,WATtCvB,EAAA,CAA+ByB,MAgBlBC,EAAa,SAAAN,GACtB,IAAMO,EAAWzB,OAAOiB,OAAO,GAAIC,GAQnC,OAPAO,EAASN,UAAYD,EAAMC,UAAY,SACvCM,EAASL,QAAU,SAAAC,GACfC,MAAM,GACFJ,EAAME,SACNF,EAAME,QAAQC,IAGfK,EAAAC,EAAAC,cAACL,EAAA,EAAWE,IAGVI,EAAa,SAAAX,GACtB,IAAMO,EAAQzB,OAAA8B,EAAA,EAAA9B,CAAA,GACPkB,EADO,CAEVC,UAAWD,EAAMC,UAAY,SAC7BC,QAAS,SAAAC,GACLC,MAAM,GACFJ,EAAME,SACNF,EAAME,QAAQC,IAGtBU,MAAO/B,OAAOiB,OAAO,GAAIC,EAAMa,MAAO,CAClCC,gBAAmB,WAI3B,OAAON,EAAAC,EAAAC,cAACL,EAAA,EAAWE,ICjBRQ,0LAxBJ,IAAAC,EAAAhC,KACP,OACEwB,EAAAC,EAAAC,cAAA,OAAKT,UAAU,OACbO,EAAAC,EAAAC,cAAA,UAAQT,UAAU,cAChBO,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACL,EAAA,EAAD,CAAQY,MAAM,WAAd,oBACAT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAD,CAAWD,MAAM,UAAUhB,UAAU,SAASC,QAAS,SAAAC,GACrDgB,QAAQC,IAAIjB,EAAGa,KADjB,cAGAR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACW,EAAD,CAAYJ,MAAM,UAAUhB,UAAU,SAASC,QAAS,SAAAC,GAAC,OAAIC,MAAM,KAAnE,eACAI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACY,EAAD,CAAYL,MAAM,UAAUhB,UAAU,SAASC,QAAS,SAAAC,GAAC,OAAIC,MAAM,IAAIS,MAAO,CAACU,eAAgB,SAA/F,yBAlBQC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e9fc1e48.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'reactstrap';\nimport './IxnButton.css';\n\nexport class IxnButton extends Button {\n    render() {\n        const tag = super.render();\n        return React.cloneElement(tag, Object.assign({},\n            tag.props,\n            {\n                className: 'sharp ' + tag.props.className,\n                onClick: e => {\n                    alert();\n                    tag.props.onClick(e);\n                }\n            },\n        ))\n    }\n}\n\nexport const IxnButton2 = props => {\n    const newProps = Object.assign({}, props)\n    newProps.className = props.className + \" sharp\"\n    newProps.onClick = e => {\n        alert(1);\n        if (props.onClick) {\n            props.onClick(e)\n        }\n    }\n    return <Button {...newProps} />\n}\n\nexport const IxnButton3 = props => {\n    const newProps = {\n        ...props,\n        className: props.className + \" sharp\",\n        onClick: e => {\n            alert(1);\n            if (props.onClick) {\n                props.onClick(e)\n            }\n        },\n        style: Object.assign({}, props.style, {\n            \"backgroundColor\": \"pink\",\n        }),\n    }\n\n    return <Button {...newProps} />\n}\n","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport { IxnButton, IxnButton2, IxnButton3 } from './IxnButton';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Components List</h1>\n          <hr/>\n          <Button color=\"primary\">Bootstrap Button</Button>\n          <br/>\n          <br/>\n          <IxnButton color=\"primary\" className=\"btn-lg\" onClick={e => {\n            console.log(e, this) \n          }}>Ixn Button</IxnButton>\n          <br/>\n          <br/>\n          <IxnButton2 color=\"primary\" className=\"btn-lg\" onClick={e => alert(2)}>Ixn Button2</IxnButton2>\n          <br/>\n          <br/>\n          <IxnButton3 color=\"primary\" className=\"btn-lg\" onClick={e => alert(2)} style={{'border-color': 'pink'}}>Ixn Button 3</IxnButton3>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}