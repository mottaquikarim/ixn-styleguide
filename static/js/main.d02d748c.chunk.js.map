{"version":3,"sources":["IxnButton.js","App.js","serviceWorker.js","index.js"],"names":["IxnButton","_Button","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","tag","get","prototype","call","React","cloneElement","assign","props","className","onClick","e","alert","Button","IxnButtonComp","newProps","objectSpread","style","backgroundColor","react_default","a","createElement","App","href","target","rel","color","IxnButton_IxnButton","IxnButton_IxnButtonComp","borderColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAIaA,SAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEQ,IAAMC,EAAGX,OAAAY,EAAA,EAAAZ,QAAAI,EAAA,EAAAJ,CAAAF,EAAAe,WAAA,SAAAX,MAAAY,KAAAZ,MACT,OAAOa,IAAMC,aAAaL,EAAKX,OAAOiB,OAAO,GACzCN,EAAIO,MACJ,CACIC,UAAW,SAAWR,EAAIO,MAAMC,UAChCC,QAAS,SAAAC,GACLC,MAAM,+DACNX,EAAIO,MAAME,QAAQC,WATtCvB,EAAA,CAA+ByB,MAgBlBC,EAAgB,SAAAN,GACzB,IAAMO,EAAQzB,OAAA0B,EAAA,EAAA1B,CAAA,GACPkB,EADO,CAEVC,UAAWD,EAAMC,UAAY,SAC7BC,QAAS,SAAAC,GACLC,MAAM,yEACFJ,EAAME,SACNF,EAAME,QAAQC,IAGtBM,MAAO3B,OAAOiB,OAAO,GAAIC,EAAMS,MAAO,CAClCC,gBAAmB,WAI3B,OAAOC,EAAAC,EAAAC,cAACR,EAAA,EAAWE,ICGRO,0LA/BX,OACEH,EAAAC,EAAAC,cAAA,OAAKZ,UAAU,OACbU,EAAAC,EAAAC,cAAA,UAAQZ,UAAU,cAChBU,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,gEACsDF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,2CAA2CC,OAAO,SAASC,IAAI,uBAAvE,cADtD,KAGAN,EAAAC,EAAAC,cAACR,EAAA,EAAD,CAAQa,MAAM,UAAUhB,QAAS,SAAAC,GAC7BC,MAAM,8EADV,oBAGAO,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uJAA8IF,EAAAC,EAAAC,cAAA,gBAA9I,gDACAF,EAAAC,EAAAC,cAACM,EAAD,CAAWD,MAAM,UAAUjB,UAAU,SAASC,QAAS,SAAAC,GACrDC,MAAM,kEADR,cAGAO,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACO,EAAD,CACEF,MAAM,UACNjB,UAAU,SACVC,QAAS,SAAAC,GACLC,MAAM,qEACPK,MAAO,CAACY,YAAe,SAL5B,yBArBQC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d02d748c.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'reactstrap';\nimport './IxnButton.css';\n\nexport class IxnButton extends Button {\n    render() {\n        const tag = super.render();\n        return React.cloneElement(tag, Object.assign({},\n            tag.props,\n            {\n                className: 'sharp ' + tag.props.className,\n                onClick: e => {\n                    alert(\"This is run within IxnButton component which extends Button\");\n                    tag.props.onClick(e);\n                }\n            },\n        ))\n    }\n}\n\nexport const IxnButtonComp = props => {\n    const newProps = {\n        ...props,\n        className: props.className + \" sharp\",\n        onClick: e => {\n            alert(\"This is run within IxnButtonComp component, which __composes__ Button\");\n            if (props.onClick) {\n                props.onClick(e)\n            }\n        },\n        style: Object.assign({}, props.style, {\n            \"backgroundColor\": \"pink\",\n        }),\n    }\n\n    return <Button {...newProps} />\n}\n","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport { IxnButton, IxnButtonComp } from './IxnButton';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Components List</h1>\n          <hr/>\n          <p>\n            Simple demonstration of overriding strategies using <a href=\"https://github.com/reactstrap/reactstrap\" target=\"_blank\" rel=\"noopener noreferrer\">reactstrap</a>.\n          </p>\n          <Button color=\"primary\" onClick={e => {\n              alert(\"This is a simple onClick callback defined by reactstrap button component\");\n          }}>Bootstrap Button</Button>\n          <br/>\n          <br/>\n          <p>Note the CSS overrides below as well. We are demonstrating the ability to override / append to both prop styles (using classes and styles) <i>and</i> prop functions (such as callback functions)</p>\n          <IxnButton color=\"primary\" className=\"btn-lg\" onClick={e => {\n            alert(\"This runs after a function wrapper calls it within IxnButton\")\n          }}>Ixn Button</IxnButton>\n          <br/>\n          <br/>\n          <IxnButtonComp\n            color=\"primary\"\n            className=\"btn-lg\"\n            onClick={e => {\n                alert(\"This runs after a function wrapper calls it within IxnButtonComp\")\n            }} style={{'borderColor': 'pink'}}>Ixn Button 3</IxnButtonComp>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}